generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model users {
  uid        String @id @default(uuid())
  name       String
  age        Int
  city       String
  email      String @unique
  phone      String
  gender     String
  occupation String
  join_date  String
  address    String
  password   String
  reviews book_review[]
  refreshTokens refreshToken[]
}

model refreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  uid       String
  user      users    @relation(fields: [uid], references: [uid])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model orders {
  oid             String  @id
  uid             String
  order_date      String
  delivery_date   String
  quantity        Int
  order_status    String
  payment_method  String
  discount_code   String? @db.VarChar(50)
  shopping_cost   Float
  tracking_number String
  customer_note   String? @db.Text
}

model coupang_products {
  pid        Float  @id
  category   String
  name       String
  base_price String
  price      String
  unit_price String
  arrival    String
  rating     String
  reward     String
  url        String
}

model books {
  book_id      Int     @id
  name         String
  category     String
  author       String
  publisher    String
  discount     String
  price        String
  price_normal String
  point        String
  description  String? @default("")
  review       String
  img          String
}

model posts {
  post_id    String   @id @default(uuid()) @db.VarChar(36)
  author_id  String   @db.VarChar(36)
  title      String   @db.VarChar(255)
  content    String   @db.Text
  created_at DateTime @db.DateTime(0)
  updated_at DateTime @updatedAt @db.DateTime(0)
  views      Int      @db.UnsignedInt
  likes      Int      @db.UnsignedInt
  comments   Int      @db.UnsignedInt
  tags       String?  @db.VarChar(255)

  @@index([author_id], map: "author_id")
}

model admins {
  admin_id   String   @id @default(uuid()) @db.VarChar(36)
  username   String   @unique(map: "username") @db.VarChar(50)
  password   String   @db.VarChar(100)
  email      String   @unique(map: "email") @db.VarChar(100)
  created_at DateTime @db.DateTime(0)
  last_login DateTime @db.DateTime(0)
  is_active  Boolean
}

model book_review {
  id Int @id @default(autoincrement())
  product_id Int
  review_text String
  rating Float
  created_at DateTime @default(now())
  user       users   @relation(fields: [user_id], references: [uid])
  user_id     String
}